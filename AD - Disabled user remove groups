#Get todays date and convert value to match the value in extensionattribute3
$date=get-date
$newdate=$date.ToString("yyyy-MM-dd")

#region Define users in and out of scope
#Get a list of all disabled users in Active Directory that have a group assigned and have a start date before today
$disabledUsers = Get-ADUser -Filter {Enabled -eq $false -and (Memberof -ne "{0}") -and (Extensionattribute3 -lt $newdate)} -Properties Memberof,extensionattribute3

#region Filter out unnecessary users
# Remove any results are a member of the group "users-on-approved-leave"
$nonleave = $disabledusers |Where-Object { $_.MemberOf -notcontains 'CN=Users-on-approved-leave,OU=Local Users and Groups,OU=ACLs,OU=Groups,OU=Corporate,DC=virginlifecare,DC=com' -and $_.MemberOf -notcontains 'CN=Exempt-from-audit-reporting,OU=Local Users and Groups,OU=ACLs,OU=Groups,OU=Corporate,DC=virginlifecare,DC=com'}
 
# Remove any users who have svc in the name and are on the $ghosts list
$targetusers= $nonleave|Where-Object {
    $_.samaccountname -notlike '*svc*' -and
    $_.samaccountname -notlike '*service*'}
#endregion
 
foreach($user in $users)
$groups = Get-ADUser $user.samaccountname -properties memberOf | % {$_.memberOf}
#remove them from every group except domain users
echo "$user was a member of the following groups:"
foreach ($group in $groups) {
    if ($group -NotLike "*Domain Users*") {
        try{
            Remove-ADPrincipalGroupMembership -Identity $user.samaccountname -MemberOf $group -Confirm:$false -Erroraction Stop
            echo "$group"
            }
        catch{
            Write-Warning $error[0]
            }
    }
}
