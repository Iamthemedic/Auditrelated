#Get todays date and convert value to match the value in extensionattribute3
$date=get-date
$newdate=$date.ToString("yyyy-MM-dd")

#region Define users in and out of scope
#Get a list of all disabled users in Active Directory that have a group assigned and have a start date before today
$disabledUsers = Get-ADUser -Filter {Enabled -eq $false -and (Memberof -ne "{0}") -and (Extensionattribute3 -lt $newdate)} -Properties Memberof,extensionattribute3
  
#region Filter out unnecessary users
# Remove any results are a member of the group "users-on-approved-leave"
$nonleave = $disabledusers |Where-Object { $_.MemberOf -notcontains 'CN=Users-on-approved-leave,OU=Local Users and Groups,OU=ACLs,OU=Groups,OU=Corporate,DC=virginlifecare,DC=com' -and $_.MemberOf -notcontains 'CN=Exempt-from-audit-reporting,OU=Local Users and Groups,OU=ACLs,OU=Groups,OU=Corporate,DC=virginlifecare,DC=com'}

# Remove any users who have svc in the name
$targetusers= $nonleave|Where-Object {
    $_.samaccountname -notlike '*svc*' -and
    $_.samaccountname -notlike '*service*'}
#endregion
   
#region Action block
# Perform a foreach command against each user that lists all groups the user belongs to if there are any users to check
if($targetusers.count -eq 0){
    Write-Host "No users with groups found"}
else{
    foreach ($user in $targetusers) {
        $groups = (Get-ADPrincipalGroupMembership -Identity $user.distinguishedname).Name
        foreach($group in $groups){
            if($group -notlike "*Domain users*"){
                try{
                Write-Host $user.SamAccountName 'is a member of' $group.DisplayName
                }
           catch{
                Write-warning $error[0]
                }
                }
            }
    }
}
#endregion
